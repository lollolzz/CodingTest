1. A + B 빠르게

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class note2 {

	public static void main(String[] args) throws IOException {
		
		
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));// 입력 
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out)); // 출력 
		
		int n = Integer.parseInt(br.readLine());
		
		StringTokenizer st;
		
		for (int i =0; i< n; i++) {
			st = new StringTokenizer(br.readLine(), " "); // 두 가지 수를 입력하게 해주는 것 
			bw.write((Integer.parseInt(st.nextToken()) +      Integer.parseInt(st.nextToken())) + "\n"); 
			// 위에서 받은 두 수를 int형으로 바꿔 연산한다 그리고 bw에 넣어주어 출력한다. 
		}
		
		br.close();
		// scanner를 닫듯 입력하는 것도 닫아준
		
		bw.flush();
		bw.close();
		
		// 문제에서 테스트 케이스 1000000가 주어진다. 
		// 케이스가 늘어날 수록 문제가 생김 
		// Sysout.out.println();의 호출횟수 또한 증가한다 
		// 시간초과 문제가 발생 함.
		
		// 또한 Scanner를 사용하게 되면 구문분석을 위해 정규식을 거치게되서 속도가 많이 느림 
		// 그래서 BufferedWriter를 사용 
		
		// 모든 입력은 BufferedReader.readLine()으로 받았다
		// 테스트 케이스에서 주어지는 두 정수는 문자열 분리를 위해 매 반복마다 StringTokenizer을 생성과 동시에 문자를 입력 받음
		
		// 또한 다음 열에서 각 StringTokenizer의 토큰(분리되어 있는 문)을 반환하, 
		// 반환되는 타입은 String이므로 Integer.partInt를 통해 int형으로 바꾸어준다. 
		// 이렇게 바꾼 두 토큰을 더해준 값을 BufferedWriter.write()에 넣어준다.
		
		// 그리고 거의 필수적으로 버퍼를 비운(flush)뒤 닫아줘야함(close).

		
	}
	
}

2. 형 변환

import java.util.Scanner;

public class note {

	public static void main(String[] args) {
		
		1번 
		Scanner src = new Scanner(System.in); 
		객체 생성 해주기
		자바에서는 어떠한 값을 입력받기 위해 사용해야한
		int a = src.nextInt();
		int b = src.nextInt();
		
		src.close(); // 자동으로 닫아지지만 명시적으로 닫아주는 것이 좋다 (예외 방지 )
		System.out.print(a+b);
		
		더하기 - 각 형마다 맞는 것들을 사용하면 된다 //
		
		String 문자열_space = src.next();
		String 문자열_Enter = src.nextLine();
		
		boolean 부울 = src.nextBoolean();
		
		byte 바이트 = src.nextByte();
		short 쇼트 = src.nextShort();
		long 롱 = src.nextLong();
		
		double 더블혈 = src.nextDouble();
		문제에 나와있듯이 오차 범위를 벗어나지 않게 하기 위해서는 반드시 double형으로 출력을 해주어야 한다.
		float 플롯 = src.nextFloat();
		
		// 2번 
		Scanner src = new Scanner(System.in);
		
		int a = src.nextInt();
		String b = src.next();
		
		src.close();
		
		System.out.println(a * (b.charAt(2) - '0'));
		System.out.println(a * (b.charAt(1) - '0'));
		System.out.println(a * (b.charAt(0) - '0'));
		System.out.println(a * Integer.parseInt(b));
		
		// b는 charAt으로 각 자리수를 참조해준다. 즉 문자열의 인덱스 위치에 있는 문자(Character) 값을 반환한다.
		// 이 때 반환되는 값은 아스키코드값은 문자(char)이다 
		// 그래서 문젱에서 주언진 숫자b(385) charAt(2)의 값 5는 실은 문자'5'이지 숫자 5가아니다
		// 그래서 -0을 해준다 -> 우리가 문자로 저장된 숫자가 아닌 우리가 보는 숫자 그대로의 값을 쓰기 위한 것.
	}

}


3.  배열로 입력된 수 중에 X보다 작은 수를 입력받은 순서대로 공백으로 구분해 출

		Scanner src = new Scanner(System.in);
		int N = src.nextInt();
		int X = src.nextInt();
		int arr[] = new int[N];
		
		for(int i = 0; i < N; i++) {
			arr[i] = src.nextInt();
		}
		
		src.close();
		
		for(int i =0; i < N; i++) {
			if(arr[i] < X) {
				System.out.println(arr[i] + " ");
			} 
		}

4. 입력값이 있는가 확인 
	
		Scanner src = new Scanner(System.in);
		
		while(src.hasNextInt()) {
		// 입력값이 있는가 확인 방법 
		// 입력값이 없다면 whlie문 종료
			
			int A = src.nextInt();
			int B = src.nextInt();
			
			System.out.println(A+B);
			
			}
		
		src.close();

5. 아스키 코드 출력

		Scanner in = new Scanner(System.in);
		
		int a = in.next().charAt(0);
		
		System.out.print(a);
		 	
