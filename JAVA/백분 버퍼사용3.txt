1번 다이얼

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
 
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		String s = br.readLine();
		
		int count = 0; // 시간 출력을 위한 count 
		int k = s.length();
		
		for(int i =0; i < k; i++) {
			
			switch(s.charAt(i)) {
			case 'A' : case 'B' : case 'C' :
				count += 3;
				break;
				// 3부터 시작하는 이유는 
				// 문제에서 숫자 1을 걸려면 총2가 걸린다고 했고,
				// 가장 첫 문자는 A이므로 같은 대열에 있는 A,B,C 는 2부터 시작하기 때문에 3초가 걸린다.
				// charAt() 으로 문자열의 문자를 갖고 오기 때문에 " "가 아닌 ''으로 해주어야된다.
				
			case 'D': case 'E': case 'F' :
				count += 4;
				break;
				
			case 'G': case 'H': case 'I' :
				count += 5;
				break;
				
			case 'J': case 'K': case 'L' :
				count += 6;
				break;
				
			case 'M': case 'N': case 'O' :
				count += 7;
				break;
				
			case 'P': case 'Q': case 'R' : case 'S' :
				count += 8;
				break;
				
			case 'T': case 'U': case 'V' :
				count += 9;
				break;
				
			case 'W': case 'X': case 'Y' : case 'Z' :
				count += 10;
				break;
			}
		}
		
		System.out.print(count);
	}
}

2번 팩토리얼[재귀함수]

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
 
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int A = Integer.parseInt(br.readLine());
		
		int sum = factorial(A);
		System.out.println(sum);
		
		
	}
	
	public static int factorial (int A) {
		
		if(A <= 1 ) return 1; // 재귀 종료조건 
		
		return A * factorial(A-1);
		
		// 참고 0!=1
		// A이 1또는 0이 될 때는 return 1을 해주고, 그 외의 경우는 A*factorial(A-1); 해줌으로서 재귀를 구성한다 
		// 문제에서 주어진 범위가 0 -12 이기 때문에 int로도 가능하지만, 13을 넘어가면 
		// 13!=6227020800 으로 int형의 범위를 벗어나기 때문에 long타입으로 해주어야 한다.
		
		// 재귀함수 
		// 재귀호출이 너무 반복적으로 되면, 즉 재귀가 깊어지면 자바에서는 Stack OverFlow라는 에러를 뱉는다.
		// 재귀함수의 경우 함수를 반복적으로 호출하는 만큼 메모리에 스택이 되기 때문에 결국 메모리를 엄청나게 차지하게 됨
		// 그리고 재귀함수가 끝날 때는 함수를 닫으면서 스택된 메모리에서 pop을 하기 때문에 수행시간 또한 매우 느려짐
		// 결국 재귀호출을 하다가 메모리가 부족해지는 것과 성능이 저하되는 것이 일상이기 때문에 이러한 이유로 재귀호출은 
		// 평상시에 알고리즘 자체가 재귀가 자연스럽거나 호출을 많이 하지 않는 범위일 때 쓰이고 그 외에는 자주 쓰이지 않는다.
		
		// 그리고 재귀 함수가 끝나는 지점을 정확하게 구현해야한다.
		// 이는 당연한 말이기도 하지만 특히나 재귀에서는 끝나는 지점이 명확하지 않으면 자칫 무한루프에 빠지기 쉽다.
	}
	
	
}

3번 팩토리얼[반복으로 품]

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
 
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int N = Integer.parseInt(br.readLine());
		
		int sum = 1;
		
		// N이 0이 아닐 때 까지 1씩 감소하면서 sum에 반복적으로 곱해준다  
		while(N != 0) {
			sum = sum * N;
			N--; 
		}
		
		System.out.println(sum);
		
	}
	
	
}

4번 피보나치 수[재귀]

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
 
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int N = Integer.parseInt(br.readLine());
		
		// 알고리즘 접근 방법 
		// 피보나치 수 설명
		// 첫번째 항이 0부터 시작할 경우 첫번째 항은 0, 두 번째 항은 1부터 시작하여, 
		// 다음 항은 직전 항과 직전 항의 직전 항의 합으로 이루어진 수열을 의미한다.
		
		// 문제에 주어진 
		//  Fn = Fn-1 + Fn-2 (n ≥ 2)를 활용하자 !!
		
		System.out.println(fibonacci(N));
		
	}
	
	// 피보나치 함수 
	static int fibonacci(int N) {
		
		if (N == 0) return 0;
		if (N == 1) return 1;
		// 피보나치 0 과 1은 항상 고정되어 있어 이대로 return하여주면 
		
		return fibonacci(N - 1) + fibonacci(N - 2);
		
		// 피보나치 문제나오면 이런 형식을 사용하도록 하자 !!!!
		
		// 만약 N이 5로 주어진다면 
		// fibonacci(4) + fibonacci(3);
		// [fibonacci(3)+finonacci(2)] + [fibonacci(2)+finonacci(1)]
		// 이런 식으로 줄여나가면서 계산하면 됨 
		// 최종 return 값은 5가 됨 
	}
	
	
}

5번 피보나치 수 [배열] -> 확실히 배열이 더 생각하기 쉬움 근데 fibonacci를 배열에 담는걸 주의 

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
 
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int N = Integer.parseInt(br.readLine());
		
		int [] fibonacci = new int[N + 1]; // F(0) 부터 시작하므로 N +1 크기 생성 
		
		for(int i =0; i < fibonacci.length; i++) {
			//F(0)과 F(1)은 각각 0 과 1로 초기화 
			if(i == 0) fibonacci[0] = 0;
			else if(i ==1) fibonacci[i] = 1;
			else fibonacci[i] = fibonacci[i - 1] + fibonacci[i-2];
			
		}
		
		System.out.println(fibonacci[N]);
		
	}
	
	
}
