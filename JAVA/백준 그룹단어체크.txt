=> 흠 HashSet 사용해서 앞뒤로 중복된 찾기 시도하는 실패함 .... 
=> HashSet은 객체를 저장하기 전에 먼저 객체의 hashCode()메소드를 호출해서 해시 코드를 얻어낸 다음 저장되어 있는 객체들의 해시코드
와 비교 한 뒤 같은 해시코드가 있다면 다시 equals()메소드로 두 객체를 비교해서 true가 나오면 동일한 객체로 판단하고 중복을 저장하지 않는다.



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	
	
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 
	public static void main(String[] args) throws IOException {
		
		int count = 0; 
		int N = Integer.parseInt(br.readLine());
		// BufferedReader를 사용하면 string으로 입력되므로 int형으로 바꾸어 주어야 함 
		
		// 그룹단어가 맞는지 확인하는 반복문 
		for(int i = 0; i < N; i++) {
			if(check() == true) {
				// return 값이 true면 count
				count++;
			}
		}
		System.out.print(count);
	}
	
	public static boolean check() throws IOException {
		
		boolean[] check = new boolean[26]; 
		// 영문자 소문자 26가지가 참인지 거짓인 확인 (연속되게 들어오는지 확인)
		int prev = 0; 
		// 현재 문자와 이전 문자가 연속된건지 현재문자가 이전에 나온적이 있는지 없는지를 확인하기 위해 선언 
		// 
		
		String str = br.readLine();
		
		for(int i=0; i < str.length(); i++) {
			// 입력된 문자의 길이 수 만큼 반복 돌리기 
			// 입력받은 문자열을 이제 하나씩 꺼내서 그룹 단어인지 아닌지를 검사해야한다.
			int now = str.charAt(i);
			// 현재 문자를 입력된 문자를 인덱스로 구분해서 하나하나 받을 수 있다.
			// 문자들을 하나씩 꺼내와서 해당 단어가 prev의 값과 같은지 판별해준다. 
			
			// 앞선 문자와 i 번째 문자가 같지 않다면 ?
			if(prev != now) {
				
				// 해당 문자가 처음 나오는 경우 (false인 경우)
				if(!check[now - 'a']) {
					check[now - 'a'] = true; // true로 바꿔준다.
					prev = now;				// 다음 턴을 위해 prev도 바꿔준다.
				}
				// 예) a a b a라는 문자를 입력받아
				// 맨 처음 'a'는 int 값으로 97이니 처음 prev 초기값 0 하고는 다르므로 check[0] 배열에 true로 바뀜
				// [참고 boolean 배열은 디폴트 값 false다.]
				// 그럼 첫 문자 a는 처음 나오는 것이므로 check[1]로 가게되면 a는 prev가 되므로
				// prev = now; 선언 
				
				// 다음 문자 a는 prev a와 같기 때문에 넘어감
				// 다음 b는 이전 a와 다르기 때문에 조건문 실행 그리고 prev b로 바뀜
				// 마지막 a도 이미 나온적이 있기 때문에 그룹단어가 아니므로 함수 종료 하고 
				// false를 return
				
				
				
				
				// 해당 문자가 이미 나온 적이 있는 경우(그룹 단어가 아니게 )(prev는 바로 직전을 말하는건 아님 )
				else { // prev와 now가 같다면 boolean 검사를 하지 않는다.
					return false;
				}
			}
			
		}
		return true;
		
	}
	
	
}
